"use client";

import React, { useState, useEffect } from "react";
import { motion } from "framer-motion";
import { ShippingInfo } from "@/types/order";
import { useSelector } from "react-redux";
import { RootState } from "@/store";
import { AddressManager } from "./AddressManager";
import { AddAddressForm } from "./AddAddressForm";

interface CheckoutFormProps {
  shippingInfo: ShippingInfo;
  onShippingInfoChange: (info: ShippingInfo) => void;
  onNext: () => void;
}

export function CheckoutForm({ shippingInfo, onShippingInfoChange, onNext }: CheckoutFormProps) {
  const userProfile = useSelector((state: RootState) => state.user.profile);
  const [formData, setFormData] = useState<ShippingInfo>(shippingInfo);
  const [showAddressManager, setShowAddressManager] = useState(false);
  const [showAddAddressForm, setShowAddAddressForm] = useState(false);

  // Auto-fill form with user profile data
  useEffect(() => {
    if (userProfile && !shippingInfo.customerName) {
      const autoFilledData: ShippingInfo = {
        customerName: `${userProfile.firstName} ${userProfile.lastName}`.trim(),
        customerPhone: userProfile.phone || "",
        shippingAddress: userProfile.address || "",
        city: userProfile.city || "",
        ward: "",
        notes: ""
      };
      
      setFormData(autoFilledData);
      onShippingInfoChange(autoFilledData);
      console.log("‚úÖ Auto-filled form with user profile data:", autoFilledData);
    }
  }, [userProfile, shippingInfo.customerName, onShippingInfoChange]);

  const handleInputChange = (field: keyof ShippingInfo, value: string) => {
    const newData = { ...formData, [field]: value };
    setFormData(newData);
    onShippingInfoChange(newData);
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    onNext();
  };

  const handleUseProfileData = () => {
    if (userProfile) {
      const profileData: ShippingInfo = {
        customerName: `${userProfile.firstName} ${userProfile.lastName}`.trim(),
        customerPhone: userProfile.phone || "",
        shippingAddress: userProfile.address || "",
        city: userProfile.city || "",
        district: "",
        ward: "",
        notes: ""
      };
      
      setFormData(profileData);
      onShippingInfoChange(profileData);
    }
  };

  const handleSelectAddress = (address: ShippingInfo) => {
    setFormData(address);
    onShippingInfoChange(address);
  };

  const handleAddNewAddress = () => {
    setShowAddressManager(false);
    setShowAddAddressForm(true);
  };

  const handleSaveNewAddress = (address: ShippingInfo) => {
    setFormData(address);
    onShippingInfoChange(address);
    setShowAddAddressForm(false);
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="bg-white rounded-xl shadow-sm p-6"
    >
      <div className="flex items-center justify-between mb-6">
        <h2 className="text-xl font-semibold text-gray-900">
          Th√¥ng tin giao h√†ng
        </h2>
        {userProfile && (
          <button
            type="button"
            onClick={handleUseProfileData}
            className="px-4 py-2 text-sm bg-blue-100 text-blue-600 rounded-lg hover:bg-blue-200 transition"
          >
            üìã S·ª≠ d·ª•ng th√¥ng tin t·ª´ h·ªì s∆°
          </button>
        )}
      </div>

      {/* Auto-fill notification */}
      {userProfile && formData.customerName && formData.customerName === `${userProfile.firstName} ${userProfile.lastName}`.trim() && (
        <div className="mb-4 p-3 bg-green-50 border border-green-200 rounded-lg">
          <div className="flex items-center space-x-2">
            <div className="text-green-500 text-sm">‚úÖ</div>
            <p className="text-sm text-green-700">
              ƒê√£ t·ª± ƒë·ªông ƒëi·ªÅn th√¥ng tin t·ª´ h·ªì s∆° c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ ch·ªânh s·ª≠a n·∫øu c·∫ßn.
            </p>
          </div>
        </div>
      )}

      <form onSubmit={handleSubmit} className="space-y-6">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              H·ªç v√† t√™n *
            </label>
            <input
              type="text"
              value={formData.customerName}
              onChange={(e) => handleInputChange("customerName", e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              placeholder="Nh·∫≠p h·ªç v√† t√™n"
              required
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              S·ªë ƒëi·ªán tho·∫°i *
            </label>
            <input
              type="tel"
              value={formData.customerPhone}
              onChange={(e) => handleInputChange("customerPhone", e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
              required
            />
          </div>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            ƒê·ªãa ch·ªâ giao h√†ng *
          </label>
          <input
            type="text"
            value={formData.shippingAddress}
            onChange={(e) => handleInputChange("shippingAddress", e.target.value)}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            placeholder="S·ªë nh√†, t√™n ƒë∆∞·ªùng"
            required
          />
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              T·ªânh/Th√†nh ph·ªë *
            </label>
            <select
              value={formData.city}
              onChange={(e) => handleInputChange("city", e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              required
            >
              <option value="">Ch·ªçn t·ªânh/th√†nh ph·ªë</option>
              <option value="TP. H·ªì Ch√≠ Minh">TP. H·ªì Ch√≠ Minh</option>
              <option value="H√† N·ªôi">H√† N·ªôi</option>
              <option value="ƒê√† N·∫µng">ƒê√† N·∫µng</option>
              <option value="C·∫ßn Th∆°">C·∫ßn Th∆°</option>
              <option value="An Giang">An Giang</option>
              <option value="B√† R·ªãa - V≈©ng T√†u">B√† R·ªãa - V≈©ng T√†u</option>
              <option value="B·∫Øc Giang">B·∫Øc Giang</option>
              <option value="B·∫Øc K·∫°n">B·∫Øc K·∫°n</option>
              <option value="B·∫°c Li√™u">B·∫°c Li√™u</option>
              <option value="B·∫Øc Ninh">B·∫Øc Ninh</option>
              <option value="B·∫øn Tre">B·∫øn Tre</option>
              <option value="B√¨nh ƒê·ªãnh">B√¨nh ƒê·ªãnh</option>
              <option value="B√¨nh D∆∞∆°ng">B√¨nh D∆∞∆°ng</option>
              <option value="B√¨nh Ph∆∞·ªõc">B√¨nh Ph∆∞·ªõc</option>
              <option value="B√¨nh Thu·∫≠n">B√¨nh Thu·∫≠n</option>
              <option value="C√† Mau">C√† Mau</option>
              <option value="Cao B·∫±ng">Cao B·∫±ng</option>
              <option value="ƒê·∫Øk L·∫Øk">ƒê·∫Øk L·∫Øk</option>
              <option value="ƒê·∫Øk N√¥ng">ƒê·∫Øk N√¥ng</option>
              <option value="ƒêi·ªán Bi√™n">ƒêi·ªán Bi√™n</option>
              <option value="ƒê·ªìng Nai">ƒê·ªìng Nai</option>
              <option value="ƒê·ªìng Th√°p">ƒê·ªìng Th√°p</option>
              <option value="Gia Lai">Gia Lai</option>
              <option value="H√† Giang">H√† Giang</option>
              <option value="H√† Nam">H√† Nam</option>
              <option value="H√† Tƒ©nh">H√† Tƒ©nh</option>
              <option value="H·∫£i D∆∞∆°ng">H·∫£i D∆∞∆°ng</option>
              <option value="H·∫≠u Giang">H·∫≠u Giang</option>
              <option value="H√≤a B√¨nh">H√≤a B√¨nh</option>
              <option value="H∆∞ng Y√™n">H∆∞ng Y√™n</option>
              <option value="Kh√°nh H√≤a">Kh√°nh H√≤a</option>
              <option value="Ki√™n Giang">Ki√™n Giang</option>
              <option value="Kon Tum">Kon Tum</option>
              <option value="Lai Ch√¢u">Lai Ch√¢u</option>
              <option value="L√¢m ƒê·ªìng">L√¢m ƒê·ªìng</option>
              <option value="L·∫°ng S∆°n">L·∫°ng S∆°n</option>
              <option value="L√†o Cai">L√†o Cai</option>
              <option value="Long An">Long An</option>
              <option value="Nam ƒê·ªãnh">Nam ƒê·ªãnh</option>
              <option value="Ngh·ªá An">Ngh·ªá An</option>
              <option value="Ninh B√¨nh">Ninh B√¨nh</option>
              <option value="Ninh Thu·∫≠n">Ninh Thu·∫≠n</option>
              <option value="Ph√∫ Th·ªç">Ph√∫ Th·ªç</option>
              <option value="Ph√∫ Y√™n">Ph√∫ Y√™n</option>
              <option value="Qu·∫£ng B√¨nh">Qu·∫£ng B√¨nh</option>
              <option value="Qu·∫£ng Nam">Qu·∫£ng Nam</option>
              <option value="Qu·∫£ng Ng√£i">Qu·∫£ng Ng√£i</option>
              <option value="Qu·∫£ng Ninh">Qu·∫£ng Ninh</option>
              <option value="Qu·∫£ng Tr·ªã">Qu·∫£ng Tr·ªã</option>
              <option value="S√≥c TrƒÉng">S√≥c TrƒÉng</option>
              <option value="S∆°n La">S∆°n La</option>
              <option value="T√¢y Ninh">T√¢y Ninh</option>
              <option value="Th√°i B√¨nh">Th√°i B√¨nh</option>
              <option value="Th√°i Nguy√™n">Th√°i Nguy√™n</option>
              <option value="Thanh H√≥a">Thanh H√≥a</option>
              <option value="Th·ª´a Thi√™n Hu·∫ø">Th·ª´a Thi√™n Hu·∫ø</option>
              <option value="Ti·ªÅn Giang">Ti·ªÅn Giang</option>
              <option value="Tr√† Vinh">Tr√† Vinh</option>
              <option value="Tuy√™n Quang">Tuy√™n Quang</option>
              <option value="Vƒ©nh Long">Vƒ©nh Long</option>
              <option value="Vƒ©nh Ph√∫c">Vƒ©nh Ph√∫c</option>
              <option value="Y√™n B√°i">Y√™n B√°i</option>
            </select>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Ph∆∞·ªùng/X√£ *
            </label>
            <input
              type="text"
              value={formData.ward}
              onChange={(e) => handleInputChange("ward", e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              placeholder="Nh·∫≠p ph∆∞·ªùng/x√£"
              required
            />
          </div>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Ghi ch√∫ (t√πy ch·ªçn)
          </label>
          <textarea
            value={formData.notes || ""}
            onChange={(e) => handleInputChange("notes", e.target.value)}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            rows={3}
            placeholder="Ghi ch√∫ th√™m cho ƒë∆°n h√†ng..."
          />
        </div>

        <div className="flex justify-between items-center">
          <button
            type="button"
            onClick={() => setShowAddressManager(true)}
            className="text-blue-600 hover:text-blue-800 text-sm font-medium"
          >
            Thay ƒë·ªïi
          </button>
          <button
            type="submit"
            className="px-8 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition"
          >
            Ti·∫øp t·ª•c
          </button>
        </div>
      </form>

      {/* Address Manager Modal */}
      <AddressManager
        isOpen={showAddressManager}
        onClose={() => setShowAddressManager(false)}
        onSelectAddress={handleSelectAddress}
      />

      {/* Add Address Form Modal */}
      <AddAddressForm
        isOpen={showAddAddressForm}
        onClose={() => setShowAddAddressForm(false)}
        onSave={handleSaveNewAddress}
      />
    </motion.div>
  );
}
