'use client';

import React, { useState } from 'react';
import { useForm } from 'react-hook-form';
import { yupResolver } from '@hookform/resolvers/yup';
import * as yup from 'yup';
import { 
  X, 
  User,
  Mail,
  Phone,
  MapPin,
  Calendar,
  Shield,
  UserCheck,
  AlertCircle,
  Save,
  Loader,
  Upload,
  Image,
  Camera
} from 'lucide-react';
import { useToastSuccess, useToastError } from '@/components/ui/Toast';

interface StaffFormProps {
  isOpen: boolean;
  onClose: () => void;
  onSuccess: () => void;
}

interface StaffFormData {
  firstName: string;
  lastName: string;
  email: string;
  phone: string;
  address: string;
  city: string;
  gender: string;
  dateOfBirth: string;
  role: string;
  isActive: boolean;
  avatar: FileList | null;
}

const schema = yup.object({
  firstName: yup.string().required('T√™n l√† b·∫Øt bu·ªôc'),
  lastName: yup.string().required('H·ªç l√† b·∫Øt bu·ªôc'),
  email: yup.string().email('Email kh√¥ng h·ª£p l·ªá').required('Email l√† b·∫Øt bu·ªôc'),
  phone: yup.string().matches(/^[0-9+\-\s()]+$/, 'S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá'),
  address: yup.string(),
  city: yup.string(),
  gender: yup.string().oneOf(['male', 'female', 'other'], 'Gi·ªõi t√≠nh kh√¥ng h·ª£p l·ªá'),
  dateOfBirth: yup.string(),
  role: yup.string().required('Vai tr√≤ l√† b·∫Øt bu·ªôc'),
  isActive: yup.boolean(),
  avatar: yup.mixed().test('fileSize', 'File qu√° l·ªõn (t·ªëi ƒëa 5MB)', (value) => {
    if (!value || value.length === 0) return true;
    return value[0]?.size <= 5 * 1024 * 1024;
  }).test('fileType', 'Ch·ªâ ch·∫•p nh·∫≠n file ·∫£nh (JPG, PNG, GIF)', (value) => {
    if (!value || value.length === 0) return true;
    return ['image/jpeg', 'image/png', 'image/gif'].includes(value[0]?.type);
  }),
});

export default function StaffForm({ isOpen, onClose, onSuccess }: StaffFormProps) {
  const [loading, setLoading] = useState(false);
  const [previewImage, setPreviewImage] = useState<string | null>(null);
  
  const toastSuccess = useToastSuccess();
  const toastError = useToastError();

  const {
    register,
    handleSubmit,
    formState: { errors },
    reset,
    watch,
    setValue
  } = useForm<StaffFormData>({
    resolver: yupResolver(schema),
    defaultValues: {
      firstName: '',
      lastName: '',
      email: '',
      phone: '',
      address: '',
      city: '',
      gender: '',
      dateOfBirth: '',
      role: 'staff',
      isActive: true,
      avatar: null,
    }
  });

  const avatarFile = watch('avatar');

  // Handle avatar preview
  React.useEffect(() => {
    if (avatarFile && avatarFile.length > 0) {
      const file = avatarFile[0];
      const reader = new FileReader();
      reader.onload = (e) => {
        setPreviewImage(e.target?.result as string);
      };
      reader.readAsDataURL(file);
    } else {
      setPreviewImage(null);
    }
  }, [avatarFile]);

  const handleAvatarChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = e.target.files;
    if (files && files.length > 0) {
      setValue('avatar', files);
    }
  };

  const removeAvatar = () => {
    setValue('avatar', null);
    setPreviewImage(null);
  };

  const roles = [
    { value: 'manager', label: 'Qu·∫£n l√Ω' },
    { value: 'staff', label: 'Nh√¢n vi√™n' },
  ];

  const genders = [
    { value: 'male', label: 'Nam' },
    { value: 'female', label: 'N·ªØ' },
    { value: 'other', label: 'Kh√°c' },
  ];

  const cities = [
    'H√† N·ªôi',
    'TP. H·ªì Ch√≠ Minh',
    'ƒê√† N·∫µng',
    'H·∫£i Ph√≤ng',
    'C·∫ßn Th∆°',
    'An Giang',
    'B√† R·ªãa - V≈©ng T√†u',
    'B·∫Øc Giang',
    'B·∫Øc K·∫°n',
    'B·∫°c Li√™u',
    'B·∫Øc Ninh',
    'B·∫øn Tre',
    'B√¨nh ƒê·ªãnh',
    'B√¨nh D∆∞∆°ng',
    'B√¨nh Ph∆∞·ªõc',
    'B√¨nh Thu·∫≠n',
    'C√† Mau',
    'Cao B·∫±ng',
    'ƒê·∫Øk L·∫Øk',
    'ƒê·∫Øk N√¥ng',
    'ƒêi·ªán Bi√™n',
    'ƒê·ªìng Nai',
    'ƒê·ªìng Th√°p',
    'Gia Lai',
    'H√† Giang',
    'H√† Nam',
    'H√† Tƒ©nh',
    'H·∫£i D∆∞∆°ng',
    'H·∫≠u Giang',
    'H√≤a B√¨nh',
    'H∆∞ng Y√™n',
    'Kh√°nh H√≤a',
    'Ki√™n Giang',
    'Kon Tum',
    'Lai Ch√¢u',
    'L√¢m ƒê·ªìng',
    'L·∫°ng S∆°n',
    'L√†o Cai',
    'Long An',
    'Nam ƒê·ªãnh',
    'Ngh·ªá An',
    'Ninh B√¨nh',
    'Ninh Thu·∫≠n',
    'Ph√∫ Th·ªç',
    'Ph√∫ Y√™n',
    'Qu·∫£ng B√¨nh',
    'Qu·∫£ng Nam',
    'Qu·∫£ng Ng√£i',
    'Qu·∫£ng Ninh',
    'Qu·∫£ng Tr·ªã',
    'S√≥c TrƒÉng',
    'S∆°n La',
    'T√¢y Ninh',
    'Th√°i B√¨nh',
    'Th√°i Nguy√™n',
    'Thanh H√≥a',
    'Th·ª´a Thi√™n Hu·∫ø',
    'Ti·ªÅn Giang',
    'Tr√† Vinh',
    'Tuy√™n Quang',
    'Vƒ©nh Long',
    'Vƒ©nh Ph√∫c',
    'Y√™n B√°i',
  ];

  const onSubmit = async (data: StaffFormData) => {
    try {
      setLoading(true);
      
      // TODO: Replace with actual API call
      console.log('üìù Staff form data:', data);
      
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      toastSuccess('Th√†nh c√¥ng', 'ƒê√£ th√™m nh√¢n vi√™n m·ªõi');
      handleClose();
      onSuccess();
      
    } catch (error: any) {
      console.error('‚ùå Error creating staff:', error);
      toastError('L·ªói', error.response?.data?.message || 'Kh√¥ng th·ªÉ t·∫°o nh√¢n vi√™n m·ªõi');
    } finally {
      setLoading(false);
    }
  };

  const handleClose = () => {
    reset();
    setPreviewImage(null);
    onClose();
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-gray-900 bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-xl w-full max-w-4xl max-h-[90vh] overflow-y-auto">
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b border-gray-200">
          <div className="flex items-center space-x-3">
            <User className="w-6 h-6 text-blue-600" />
            <h2 className="text-xl font-semibold text-gray-900">Th√™m nh√¢n vi√™n m·ªõi</h2>
          </div>
          <button
            onClick={handleClose}
            className="text-gray-400 hover:text-gray-600 transition-colors"
          >
            <X className="w-6 h-6" />
          </button>
        </div>

        {/* Form */}
        <form onSubmit={handleSubmit(onSubmit)} className="p-6 space-y-6">
          {/* Avatar Upload */}
          <div className="space-y-4">
            <h3 className="text-lg font-medium text-gray-900 flex items-center">
              <Camera className="w-5 h-5 mr-2" />
              ·∫¢nh ƒë·∫°i di·ªán
            </h3>
            
            <div className="flex items-center space-x-6">
              {/* Avatar Preview */}
              <div className="flex-shrink-0">
                {previewImage ? (
                  <div className="relative">
                    <img
                      src={previewImage}
                      alt="Avatar preview"
                      className="w-24 h-24 rounded-full object-cover border-2 border-gray-200"
                    />
                    <button
                      type="button"
                      onClick={removeAvatar}
                      className="absolute -top-2 -right-2 w-6 h-6 bg-red-500 text-white rounded-full flex items-center justify-center hover:bg-red-600 transition-colors"
                    >
                      <X className="w-4 h-4" />
                    </button>
                  </div>
                ) : (
                  <div className="w-24 h-24 rounded-full bg-gray-200 flex items-center justify-center border-2 border-dashed border-gray-300">
                    <User className="w-8 h-8 text-gray-400" />
                  </div>
                )}
              </div>

              {/* Upload Button */}
              <div className="flex-1">
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Ch·ªçn ·∫£nh ƒë·∫°i di·ªán
                </label>
                <div className="flex items-center space-x-3">
                  <label className="cursor-pointer">
                    <input
                      type="file"
                      accept="image/*"
                      onChange={handleAvatarChange}
                      className="hidden"
                    />
                    <div className="flex items-center space-x-2 px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors">
                      <Upload className="w-4 h-4" />
                      <span className="text-sm text-gray-700">Ch·ªçn ·∫£nh</span>
                    </div>
                  </label>
                  <span className="text-xs text-gray-500">
                    JPG, PNG, GIF (t·ªëi ƒëa 5MB)
                  </span>
                </div>
                {errors.avatar && (
                  <p className="mt-1 text-sm text-red-600 flex items-center">
                    <AlertCircle className="w-4 h-4 mr-1" />
                    {errors.avatar.message}
                  </p>
                )}
              </div>
            </div>
          </div>

          {/* Personal Information */}
          <div className="space-y-4">
            <h3 className="text-lg font-medium text-gray-900 flex items-center">
              <User className="w-5 h-5 mr-2" />
              Th√¥ng tin c√° nh√¢n
            </h3>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {/* First Name */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  T√™n *
                </label>
                <input
                  {...register('firstName')}
                  type="text"
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  placeholder="Nh·∫≠p t√™n"
                />
                {errors.firstName && (
                  <p className="mt-1 text-sm text-red-600 flex items-center">
                    <AlertCircle className="w-4 h-4 mr-1" />
                    {errors.firstName.message}
                  </p>
                )}
              </div>

              {/* Last Name */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  H·ªç *
                </label>
                <input
                  {...register('lastName')}
                  type="text"
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  placeholder="Nh·∫≠p h·ªç"
                />
                {errors.lastName && (
                  <p className="mt-1 text-sm text-red-600 flex items-center">
                    <AlertCircle className="w-4 h-4 mr-1" />
                    {errors.lastName.message}
                  </p>
                )}
              </div>

              {/* Email */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  <Mail className="w-4 h-4 inline mr-1" />
                  Email *
                </label>
                <input
                  {...register('email')}
                  type="email"
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  placeholder="Nh·∫≠p email"
                />
                {errors.email && (
                  <p className="mt-1 text-sm text-red-600 flex items-center">
                    <AlertCircle className="w-4 h-4 mr-1" />
                    {errors.email.message}
                  </p>
                )}
              </div>

              {/* Phone */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  <Phone className="w-4 h-4 inline mr-1" />
                  S·ªë ƒëi·ªán tho·∫°i
                </label>
                <input
                  {...register('phone')}
                  type="tel"
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
                />
                {errors.phone && (
                  <p className="mt-1 text-sm text-red-600 flex items-center">
                    <AlertCircle className="w-4 h-4 mr-1" />
                    {errors.phone.message}
                  </p>
                )}
              </div>

              {/* Gender */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Gi·ªõi t√≠nh
                </label>
                <select
                  {...register('gender')}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                >
                  <option value="">Ch·ªçn gi·ªõi t√≠nh</option>
                  {genders.map(gender => (
                    <option key={gender.value} value={gender.value}>
                      {gender.label}
                    </option>
                  ))}
                </select>
                {errors.gender && (
                  <p className="mt-1 text-sm text-red-600 flex items-center">
                    <AlertCircle className="w-4 h-4 mr-1" />
                    {errors.gender.message}
                  </p>
                )}
              </div>

              {/* Date of Birth */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  <Calendar className="w-4 h-4 inline mr-1" />
                  Ng√†y sinh
                </label>
                <input
                  {...register('dateOfBirth')}
                  type="date"
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
                {errors.dateOfBirth && (
                  <p className="mt-1 text-sm text-red-600 flex items-center">
                    <AlertCircle className="w-4 h-4 mr-1" />
                    {errors.dateOfBirth.message}
                  </p>
                )}
              </div>
            </div>
          </div>

          {/* Address Information */}
          <div className="space-y-4">
            <h3 className="text-lg font-medium text-gray-900 flex items-center">
              <MapPin className="w-5 h-5 mr-2" />
              Th√¥ng tin ƒë·ªãa ch·ªâ
            </h3>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {/* Address */}
              <div className="md:col-span-2">
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  ƒê·ªãa ch·ªâ
                </label>
                <textarea
                  {...register('address')}
                  rows={3}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ chi ti·∫øt"
                />
                {errors.address && (
                  <p className="mt-1 text-sm text-red-600 flex items-center">
                    <AlertCircle className="w-4 h-4 mr-1" />
                    {errors.address.message}
                  </p>
                )}
              </div>

              {/* City */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Th√†nh ph·ªë/T·ªânh
                </label>
                <select
                  {...register('city')}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                >
                  <option value="">Ch·ªçn th√†nh ph·ªë/t·ªânh</option>
                  {cities.map(city => (
                    <option key={city} value={city}>
                      {city}
                    </option>
                  ))}
                </select>
                {errors.city && (
                  <p className="mt-1 text-sm text-red-600 flex items-center">
                    <AlertCircle className="w-4 h-4 mr-1" />
                    {errors.city.message}
                  </p>
                )}
              </div>
            </div>
          </div>

          {/* Work Information */}
          <div className="space-y-4">
            <h3 className="text-lg font-medium text-gray-900 flex items-center">
              <Shield className="w-5 h-5 mr-2" />
              Th√¥ng tin c√¥ng vi·ªác
            </h3>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {/* Role */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Vai tr√≤ *
                </label>
                <select
                  {...register('role')}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                >
                  {roles.map(role => (
                    <option key={role.value} value={role.value}>
                      {role.label}
                    </option>
                  ))}
                </select>
                {errors.role && (
                  <p className="mt-1 text-sm text-red-600 flex items-center">
                    <AlertCircle className="w-4 h-4 mr-1" />
                    {errors.role.message}
                  </p>
                )}
              </div>

              {/* Status */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  <UserCheck className="w-4 h-4 inline mr-1" />
                  Tr·∫°ng th√°i
                </label>
                <div className="flex items-center space-x-4">
                  <label className="flex items-center">
                    <input
                      {...register('isActive')}
                      type="radio"
                      value="true"
                      className="mr-2"
                    />
                    <span className="text-sm text-gray-700">Ho·∫°t ƒë·ªông</span>
                  </label>
                  <label className="flex items-center">
                    <input
                      {...register('isActive')}
                      type="radio"
                      value="false"
                      className="mr-2"
                    />
                    <span className="text-sm text-gray-700">T·∫°m d·ª´ng</span>
                  </label>
                </div>
                {errors.isActive && (
                  <p className="mt-1 text-sm text-red-600 flex items-center">
                    <AlertCircle className="w-4 h-4 mr-1" />
                    {errors.isActive.message}
                  </p>
                )}
              </div>
            </div>
          </div>

          {/* Actions */}
          <div className="flex items-center justify-end space-x-3 pt-6 border-t border-gray-200">
            <button
              type="button"
              onClick={handleClose}
              className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors"
            >
              H·ªßy
            </button>
            <button
              type="submit"
              disabled={loading}
              className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors flex items-center space-x-2"
            >
              {loading ? (
                <>
                  <Loader className="w-4 h-4 animate-spin" />
                  <span>ƒêang t·∫°o...</span>
                </>
              ) : (
                <>
                  <Save className="w-4 h-4" />
                  <span>T·∫°o nh√¢n vi√™n</span>
                </>
              )}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}
